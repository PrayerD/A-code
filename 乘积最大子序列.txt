给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。

示例 1:

输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
示例 2:

输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。


#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int main(){
	vector<int> num{2,3,-2,4};
	int numSize=num.size();
	vector<int> maxDp=num;
	vector<int> minDp=num;
	vector<int> Dp(2);
	int resultMaxValue=0;
	for(int index=1;index<numSize;index++){
		Dp[0]=maxDp[index-1]*num[index];
		Dp[1]=minDp[index-1]*num[index];
		maxDp[index]=max(Dp[0],max(Dp[1],num[index]));
		minDp[index]=min(Dp[0],max(Dp[1],num[index]));
		resultMaxValue=max(resultMaxValue,maxDp[index]);
	}
	cout<<resultMaxValue;
	return 0;
}